@using Diabetes.MVC.Models.Components
@model Diabetes.MVC.Models.Foods.FoodListViewModel

@{
    ViewData["Title"] = "Продукты";
}

<div class="d-flex justify-content-around">
    <a class="btn btn-sm active" asp-controller="Food" asp-action="Index">Все продукты</a>
    <a class="btn btn-sm" asp-controller="UsersFood" asp-action="Index">Мои продукты</a>
</div>

<div class="row mt-4"></div>

<div class="d-flex justify-content-between container mobile-container">
    <form class="container mobile-container input-group" asp-controller="Food" asp-action="Index">
        <input type="search" class="form-control form-control-sm" placeholder="Название продукта..." asp-for="SearchString" />
        <button type="submit" class="btn btn-sm btn-outline-primary">Поиск</button>
    </form>
    <a class="btn btn-sm btn-primary" asp-controller="UsersFood" asp-action="Add"><img src="~/icons/plus.svg"></a>
</div>


<div class="row mt-4"></div>

<div class="container mobile-container">
    @await Component.InvokeAsync("FoodItemsList", new{ model = new FoodListViewModel(Model.FoodItems) })
    @await Component.InvokeAsync("Pagination",
        new
        {
            model = new PaginationViewModel
                (Model.SearchString, Model.FoodItems.HasPreviousPage, Model.FoodItems.HasNextPage, Model.FoodItems.PageIndex)
        })    
    
</div>